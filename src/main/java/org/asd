public class Interpreter {
    public RTResult visit(Node node, Context context) {
        String methodName = "visit_" + node.getClass().getSimpleName();
        Method method;
        try {
            method = this.getClass().getMethod(methodName, node.getClass(), Context.class);
        } catch (NoSuchMethodException e) {
            return noVisitMethod(node, context);
        }
        try {
            return (RTResult) method.invoke(this, node, context);
        } catch (IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
            return null;
        }
    }

    public RTResult noVisitMethod(Node node, Context context) {
        throw new RuntimeException("No visit_" + node.getClass().getSimpleName() + " method defined");
    }

    public RTResult visit_NumberNode(NumberNode node, Context context) {
        return new RTResult().success(
                new Number(node.getTok().getValue()).setContext(context).setPos(node.getPosStart(), node.getPosEnd())
        );
    }

    public RTResult visit_BinOpNode(BinOpNode node, Context context) {
        RTResult res = new RTResult();
        RTResult left = res.register(visit(node.getLeftNode(), context));
        if (res.getError() != null) return res;
        RTResult right = res.register(visit(node.getRightNode(), context));
        if (res.getError() != null) return res;

        Token opTok = node.getOpTok();
        String opType = opTok.getType();

        Value result = null;
        Error error = null;

        if (opType.equals(TokenTypes.TT_PLUS)) {
            result = left.getValue().addedTo(right.getValue());
        } else if (opType.equals(TokenTypes.TT_MINUS)) {
            result = left.getValue().subbedBy(right.getValue());
        } else if (opType.equals(TokenTypes.TT_MUL)) {
            result = left.getValue().multedBy(right.getValue());
        } else if (opType.equals(TokenTypes.TT_DIV)) {
            result = left.getValue().divedBy(right.getValue());
        }

        if (result == null) {
            error = new Error("Invalid operation", opTok.getPosStart(), opTok.getPosEnd(), context);
        }

        if (error != null) {
            return res.failure(error);
        } else {
            return res.success(result.setPos(node.getPosStart(), node.getPosEnd()));
        }
    }

    public RTResult visit_UnaryOpNode(UnaryOpNode node, Context context) {
        RTResult res = new RTResult();
        RTResult number = res.register(visit(node.getNode(), context));
        if (res.getError() != null) return res;

        Value result = null;
        Error error = null;

        Token opTok = node.getOpTok();
        String opType = opTok.getType();

        if (opType.equals(TokenTypes.TT_MINUS)) {
            result = number.getValue().multedBy(new Number(-1));
        }

        if (result == null) {
            error = new Error("Invalid operation", opTok.getPosStart(), opTok.getPosEnd(), context);
        }

        if (error != null) {
            return res.failure(error);
        } else {
            return res.success(result.setPos(node.getPosStart(), node.getPosEnd()));
        }
    }
}